<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>NN</title>
<link>https://krasing.github.io/nn/</link>
<atom:link href="https://krasing.github.io/nn/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.7.31</generator>
<lastBuildDate>Mon, 02 Jan 2023 22:00:00 GMT</lastBuildDate>
<item>
  <title>Hiding the details - the Module class</title>
  <dc:creator>Krasin Georgiev</dc:creator>
  <link>https://krasing.github.io/nn/posts/classes/classes.html</link>
  <description><![CDATA[ 





<p>How to build a NN model? When you drive a car you don’t see all car and engine parameters. Even when an engineer designs a car he don’t know details about each component (mechanical, electrical, electro-mechanical or electronic part). This is done to manage the complexity. This approach is especially important for software design where the number of components is much greater and design flexibility is colse to infinity.</p>
<p>The code was adapted from <a href="https://github.com/fastai/course22p2">fastai course 2022, part 2</a> while studying notebooks <code>03_backprop.ipynb</code> and <code>04_minibatch_training.ipynb</code>.</p>
<section id="layers" class="level1">
<h1>Layers</h1>
<p>Some of the most widely used layers in a NN are Linear, ReLU and Mse.</p>
<p>The weights of the layer are initiated when the object is created and are defined in the <code>__init__</code> method. The relationship for calculating the output from the input are defined in the <code>__call__</code> layer (the “forward” feature). The functionality for calculation of the gradients is provided in the <code>backward</code> method. For example:</p>
<div id="cell-3" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Lin():</span>
<span id="cb1-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, w, b):</span>
<span id="cb1-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> w</span>
<span id="cb1-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b</span>
<span id="cb1-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb1-6">        y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.b</span>
<span id="cb1-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x</span>
<span id="cb1-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y</span>
<span id="cb1-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y</span>
<span id="cb1-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> backward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):        </span>
<span id="cb1-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.b.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y.g.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y.g</span>
<span id="cb1-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w.T</span></code></pre></div>
</div>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> ReLU():</span>
<span id="cb2-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb2-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x</span>
<span id="cb2-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.relu(x)</span>
<span id="cb2-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y</span>
<span id="cb2-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> relu(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x.clamp_min(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>)</span>
<span id="cb2-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> backward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>): <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
</div>
<div id="cell-5" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Mse():</span>
<span id="cb3-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, pred, y):</span>
<span id="cb3-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pred</span>
<span id="cb3-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.targ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y</span>
<span id="cb3-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (pred<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>y).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">pow</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).mean()</span>
<span id="cb3-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> backward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pred.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.targ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.targ.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.targ.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
</div>
<p>The following code demonstrates the creation and use of a linear layer object. Look for:</p>
<ul>
<li><p>Initialization: <code>lin = Lin(w, b</code></p></li>
<li><p>Forward application: <code>y = lin(x)</code></p></li>
<li><p>Backpropagation: <code>lin.backward()</code></p></li>
</ul>
<div id="cell-7" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastcore.test <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> test_close</span></code></pre></div>
</div>
<div id="cell-8" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate random weights for the model</span></span>
<span id="cb5-2">M <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of input features</span></span>
<span id="cb5-3">H <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of outputs</span></span>
<span id="cb5-4">w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(M,H)</span>
<span id="cb5-5">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(H)</span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create linear layer object</span></span>
<span id="cb5-8">lin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Lin(w, b)</span>
<span id="cb5-9"></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate inputs</span></span>
<span id="cb5-11">N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of samples</span></span>
<span id="cb5-12">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.rand((N, M))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># just random numbers as example</span></span>
<span id="cb5-13"></span>
<span id="cb5-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the output of the layer</span></span>
<span id="cb5-15">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lin(x)</span>
<span id="cb5-16"></span>
<span id="cb5-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show inputs and outputs</span></span>
<span id="cb5-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x = </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">y = </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, y)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>x = 
 tensor([[ 3.6329, -1.5028,  1.5645, -2.5170],
        [ 4.4755,  3.9404, -3.6032, -0.0517],
        [ 1.0234, -3.7332,  3.1473,  0.6829]]) 
y = 
 tensor([[ 0.6308, -2.3627],
        [ 4.0016, -2.5262],
        [-1.7378,  1.8884]])</code></pre>
</div>
</div>
<div id="cell-9" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Provide output gradients (usually based on the Loss: y.g = dL/dy)</span></span>
<span id="cb7-2">y.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.rand(y.shape) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># output gradients are needed in order for backpropagation to work</span></span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate (backpropagate) gradients</span></span>
<span id="cb7-5">lin.backward()</span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show gradients</span></span>
<span id="cb7-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x.g = </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, x.g, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">w.g = </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, w.g, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b.g = </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, b)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>x.g = 
 tensor([[0.2319, 0.9382, 0.8166, 0.7303],
        [0.2856, 0.8208, 0.5457, 0.4417],
        [0.2376, 0.8698, 0.7110, 0.6232]]) 
w.g = 
 tensor([[ 8.1594,  5.1629],
        [-0.9825, -1.6451],
        [ 0.8388,  1.4778],
        [-1.6999, -1.4052]]) 
b.g = 
 tensor([0., 0.])</code></pre>
</div>
</div>
<div id="cell-10" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">relu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ReLU()</span>
<span id="cb9-2">y_relu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> relu(x)</span>
<span id="cb9-3">x, y_relu</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>(tensor([[ 3.6329, -1.5028,  1.5645, -2.5170],
         [ 4.4755,  3.9404, -3.6032, -0.0517],
         [ 1.0234, -3.7332,  3.1473,  0.6829]]),
 tensor([[3.6329, 0.0000, 1.5645, 0.0000],
         [4.4755, 3.9404, 0.0000, 0.0000],
         [1.0234, 0.0000, 3.1473, 0.6829]]))</code></pre>
</div>
</div>
<div id="cell-11" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">y_relu.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.rand(y_relu.shape)</span>
<span id="cb11-2">relu.backward()</span>
<span id="cb11-3">x_relu_g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.g</span></code></pre></div>
</div>
</section>
<section id="models" class="level1">
<h1>Models</h1>
<p>A model is an arrangement of one or more layers. It contains all the weights and relationships that allow an input to be transformed into an output and loss and the derivative of the loss to be back-propagated to the model weights and inputs. Each layer can be considered a simple model. Each model have the same general methods as a layer.</p>
<p>A kind of a distinction between a model and layer could be introduced if the explicit output of the model is restricted to be a scalar - the loss. But the loss is quite often calculated separately over the outputs of the model in which case the models are just more complex layers.</p>
<p>The simplest arrangement is a sequence of layers where the output of each layer (except the last one) is input to the next layer.</p>
<div id="cell-14" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A model with just a Linear, ReLU and Loss layers</span></span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The output of the model is the loss. </span></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># In additon, the output of the last layer (usually the loss is not counted as a layer)</span></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># is saved as model attribure self.y</span></span>
<span id="cb12-6"></span>
<span id="cb12-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Model():</span>
<span id="cb12-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, w, b):</span>
<span id="cb12-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Lin(w, b), ReLU()]</span>
<span id="cb12-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mse()</span>
<span id="cb12-11">        </span>
<span id="cb12-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, targ):</span>
<span id="cb12-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> l <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layers: </span>
<span id="cb12-14">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> l(x)</span>
<span id="cb12-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x</span>
<span id="cb12-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss(x, targ)</span>
<span id="cb12-17">    </span>
<span id="cb12-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> backward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb12-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss.backward()</span>
<span id="cb12-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> l <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reversed</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layers): </span>
<span id="cb12-21">            l.backward()</span></code></pre></div>
</div>
<div id="cell-15" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Model(w, b)</span></code></pre></div>
</div>
<div id="cell-16" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate target values (needed to calculate the loss)</span></span>
<span id="cb14-2">k1, k2, k3, k4, k6, k7 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb14-3">W_true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([[k1, k1],</span>
<span id="cb14-4">                  [k2, k2],</span>
<span id="cb14-5">                  [k3, k6],</span>
<span id="cb14-6">                  [k4, k7]])</span>
<span id="cb14-7">b_true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb14-8">y_target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W_true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b_true <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output</span></span></code></pre></div>
</div>
<div id="cell-17" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(x, y_target)</span>
<span id="cb15-2">loss</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>tensor(10.5302)</code></pre>
</div>
</div>
<div id="cell-18" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.y</span>
<span id="cb17-2">out</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>tensor([[0.6308, 0.0000],
        [4.0016, 0.0000],
        [0.0000, 1.8884]])</code></pre>
</div>
</div>
<div id="cell-19" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">model.backward()</span></code></pre></div>
</div>
<div id="cell-20" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show gradients</span></span>
<span id="cb20-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x.g = </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, x.g, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">w.g = </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, w.g, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b.g = </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, b)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>x.g = 
 tensor([[ 0.3201,  0.5563,  0.1117, -0.0025],
        [ 0.1260,  0.2190,  0.0440, -0.0010],
        [ 0.0929, -0.2466, -0.5286, -0.5591]]) 
w.g = 
 tensor([[ 4.3441, -0.5581],
        [ 0.0389,  2.0357],
        [ 0.1176, -1.7162],
        [-2.0432, -0.3724]]) 
b.g = 
 tensor([0., 0.])</code></pre>
</div>
</div>
</section>
<section id="the-module-class-and-class-inheritance" class="level1">
<h1>The Module class and class inheritance</h1>
<p>Above classes can be based on a more general class so and more information can be hidden, e.g.&nbsp;saving parameter gradients, saving inputs and outputs, etc. Only the initialization and the functions needed to do the forward and backward pass need to be redefined. All we have is modules and submodules.</p>
<div id="cell-23" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Module():        </span>
<span id="cb22-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x):</span>
<span id="cb22-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x</span>
<span id="cb22-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.forward(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x)</span>
<span id="cb22-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y    </span>
<span id="cb22-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> backward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb22-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bwd(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x)</span>
<span id="cb22-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb22-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Not implemented'</span>)    </span>
<span id="cb22-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> bwd(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb22-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Not implemented'</span>)</span></code></pre></div>
</div>
<div id="cell-24" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Lin(Module):</span>
<span id="cb23-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, w, b):</span>
<span id="cb23-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> w</span>
<span id="cb23-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b</span>
<span id="cb23-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb23-6">        y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.b</span>
<span id="cb23-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> y</span>
<span id="cb23-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> bwd(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, y, x):        </span>
<span id="cb23-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.b.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y.g.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb23-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> y.g</span>
<span id="cb23-11">        x.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  y.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w.T</span></code></pre></div>
</div>
<div id="cell-25" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create linear layer object</span></span>
<span id="cb24-2">lin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Lin(w, b)</span>
<span id="cb24-3"></span>
<span id="cb24-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the output of the layer</span></span>
<span id="cb24-5">y2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lin(x)</span>
<span id="cb24-6"></span>
<span id="cb24-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test results</span></span>
<span id="cb24-8">test_close(y, y2)</span></code></pre></div>
</div>
<div id="cell-26" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">lin.y.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.rand(lin.y.shape)</span>
<span id="cb25-2">lin.backward()</span></code></pre></div>
</div>
<div id="cell-27" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">test_close(x.g, lin.x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].g)</span>
<span id="cb26-2">test_close(w.g, lin.w.g)</span>
<span id="cb26-3">test_close(b.g, lin.b.g)</span></code></pre></div>
</div>
<div id="cell-28" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> ReLU(Module):</span>
<span id="cb27-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x.clamp_min(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>)</span>
<span id="cb27-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> bwd(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, y, x): x.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
</div>
<div id="cell-29" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">relu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ReLU()</span>
<span id="cb28-2">test_close( relu(x), y_relu)</span></code></pre></div>
</div>
<div id="cell-30" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">relu.y.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_relu.g</span>
<span id="cb29-2">relu.backward()</span>
<span id="cb29-3">test_close(relu.x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].g, x_relu_g)</span></code></pre></div>
</div>
<div id="cell-31" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Mse(Module):</span>
<span id="cb30-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, pred, y): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (pred<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>y).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">pow</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).mean()</span>
<span id="cb30-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> bwd(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, out, pred, targ):</span>
<span id="cb30-4">        pred.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> targ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> targ.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> targ.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
</div>
<div id="cell-32" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Model(w, b)</span></code></pre></div>
</div>
<div id="cell-33" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">test_close(model(x, y_target), loss)</span></code></pre></div>
</div>
<div id="cell-34" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">model.backward()</span></code></pre></div>
</div>
<div id="cell-35" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show gradients</span></span>
<span id="cb34-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x.g = </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, x.g, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">w.g = </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, w.g, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b.g = </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, b)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>x.g = 
 tensor([[ 0.3201,  0.5563,  0.1117, -0.0025],
        [ 0.1260,  0.2190,  0.0440, -0.0010],
        [ 0.0929, -0.2466, -0.5286, -0.5591]]) 
w.g = 
 tensor([[ 4.3441, -0.5581],
        [ 0.0389,  2.0357],
        [ 0.1176, -1.7162],
        [-2.0432, -0.3724]]) 
b.g = 
 tensor([0., 0.])</code></pre>
</div>
</div>
</section>
<section id="pytorch-layers-and-module-class" class="level1">
<h1>PyTorch layers and Module class</h1>
<p>The above Module will be replaced by the standard PyTorch class <code>nn.Module</code>. The autograd and backpropagation features of PyTorch will be used to remove the need for defining the <code>bwd</code> or the <code>backward</code>methods. The <code>Lin</code> layer will be redefined to inherit <code>nn.Module</code>. The <code>ReLU()</code> and <code>Mse()</code> layers will be replaced by <code>nn.ReLU()</code> and <code>nn.MSELoss()</code> respectively.</p>
<div id="cell-38" class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> nn</span></code></pre></div>
</div>
<div id="cell-39" class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Lin(nn.Module):</span>
<span id="cb37-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, w, b):</span>
<span id="cb37-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb37-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> w.requires_grad_(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb37-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b.requires_grad_(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb37-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb37-7">        y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.b</span>
<span id="cb37-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> y</span></code></pre></div>
</div>
<div id="cell-40" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create linear layer object</span></span>
<span id="cb38-2">lin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Lin(w, b)</span>
<span id="cb38-3"></span>
<span id="cb38-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the output of the layer</span></span>
<span id="cb38-5">y2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lin(x)</span>
<span id="cb38-6"></span>
<span id="cb38-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test results</span></span>
<span id="cb38-8">test_close(y, y2)</span></code></pre></div>
</div>
<div id="cell-41" class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">y2.grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.rand(y.shape) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># output gradients are needed in order for backpropagation to work</span></span>
<span id="cb39-2"></span>
<span id="cb39-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate (backpropagate) gradients</span></span>
<span id="cb39-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># y2.backward()</span></span>
<span id="cb39-5"></span>
<span id="cb39-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># RuntimeError: grad can be implicitly created only for scalar outputs</span></span></code></pre></div>
</div>
<div id="cell-42" class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Model(nn.Module):</span>
<span id="cb40-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, w, b):</span>
<span id="cb40-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb40-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Lin(w, b), nn.ReLU()]</span>
<span id="cb40-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.MSELoss()        </span>
<span id="cb40-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, targ):</span>
<span id="cb40-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> l <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layers: </span>
<span id="cb40-8">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> l(x)</span>
<span id="cb40-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x</span>
<span id="cb40-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss(x, targ)</span></code></pre></div>
</div>
<div id="cell-43" class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Model(w, b)</span></code></pre></div>
</div>
<div id="cell-44" class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(x, y_target)</span></code></pre></div>
</div>
<div id="cell-45" class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">loss</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="36">
<pre><code>tensor(10.5302, grad_fn=&lt;MseLossBackward0&gt;)</code></pre>
</div>
</div>
<div id="cell-46" class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">loss.backward()</span></code></pre></div>
</div>
<div id="cell-47" class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">test_close(w.grad, w.g)</span></code></pre></div>
</div>
<div id="cell-48" class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">test_close(b.grad, b.g)</span></code></pre></div>
</div>
<div id="cell-49" class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">x.grad</span>
<span id="cb48-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># None because `x.requires_grad_(True)` was never called</span></span></code></pre></div>
</div>
<div id="cell-50" class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">x.requires_grad_(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="41">
<pre><code>tensor([[ 3.6329, -1.5028,  1.5645, -2.5170],
        [ 4.4755,  3.9404, -3.6032, -0.0517],
        [ 1.0234, -3.7332,  3.1473,  0.6829]], requires_grad=True)</code></pre>
</div>
</div>
<div id="cell-51" class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># gradients accumulate</span></span>
<span id="cb51-2">w.grad.zero_()</span>
<span id="cb51-3">b.grad.zero_()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="42">
<pre><code>tensor([0., 0.])</code></pre>
</div>
</div>
<div id="cell-52" class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(x, y_target)</span></code></pre></div>
</div>
<div id="cell-53" class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1">loss.backward()</span></code></pre></div>
</div>
<div id="cell-54" class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">x.grad</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="45">
<pre><code>tensor([[ 0.3201,  0.5563,  0.1117, -0.0025],
        [ 0.1260,  0.2190,  0.0440, -0.0010],
        [ 0.0929, -0.2466, -0.5286, -0.5591]])</code></pre>
</div>
</div>
<div id="cell-55" class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1">test_close(x.grad, x.g)</span></code></pre></div>
</div>
<div id="cell-56" class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1">test_close(w.grad, w.g)</span></code></pre></div>
</div>
</section>
<section id="some-more-details-in-pytorch" class="level1">
<h1>Some more details in PyTorch</h1>
<div id="cell-58" class="cell" data-execution_count="48">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># notice that the layers of the model are not properly registered and accessible</span></span>
<span id="cb59-2">model</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="48">
<pre><code>Model(
  (loss): MSELoss()
)</code></pre>
</div>
</div>
<div id="cell-59" class="cell" data-execution_count="49">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1">model.layers[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>](x)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="49">
<pre><code>tensor([[3.6329, 0.0000, 1.5645, 0.0000],
        [4.4755, 3.9404, 0.0000, 0.0000],
        [1.0234, 0.0000, 3.1473, 0.6829]], grad_fn=&lt;ReluBackward0&gt;)</code></pre>
</div>
</div>
<div id="cell-60" class="cell" data-execution_count="50">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(model.named_children())</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="50">
<pre><code>[('loss', MSELoss())]</code></pre>
</div>
</div>
<div id="cell-61" class="cell" data-execution_count="51">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(model.parameters())</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="51">
<pre><code>[]</code></pre>
</div>
</div>
<div id="cell-62" class="cell" data-execution_count="52">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> model.parameters(): <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(p.shape)</span></code></pre></div>
</div>
<div id="cell-63" class="cell" data-execution_count="53">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Model(nn.Module):</span>
<span id="cb68-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, w, b):</span>
<span id="cb68-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb68-4">        layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Lin(w, b), nn.ReLU()]</span>
<span id="cb68-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.ModuleList(layers)</span>
<span id="cb68-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.MSELoss()        </span>
<span id="cb68-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, targ):</span>
<span id="cb68-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> l <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layers: </span>
<span id="cb68-9">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> l(x)</span>
<span id="cb68-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x</span>
<span id="cb68-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss(x, targ)</span></code></pre></div>
</div>
<div id="cell-64" class="cell" data-execution_count="54">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb69-1">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Model(w, b)</span></code></pre></div>
</div>
<div id="cell-65" class="cell" data-execution_count="55">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(model.named_children())</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="55">
<pre><code>[('layers',
  ModuleList(
    (0): Lin()
    (1): ReLU()
  )),
 ('loss', MSELoss())]</code></pre>
</div>
</div>
<div id="cell-66" class="cell" data-execution_count="56">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(model.parameters())</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="56">
<pre><code>[]</code></pre>
</div>
</div>
<div id="cell-67" class="cell" data-execution_count="57">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1">model.layers[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].w</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="57">
<pre><code>tensor([[ 0.3975, -0.1704],
        [ 0.6908,  0.4523],
        [ 0.1387,  0.9694],
        [-0.0032,  1.0253]], requires_grad=True)</code></pre>
</div>
</div>
<p>See <a href="https://github.com/fastai/course22p2/blob/master/nbs/04_minibatch_training.ipynb">04_minibatch_training.ipynb</a> to learn how to use parameters and set attrivutes and register modules (sections Using parameters and optim)</p>
</section>
<section id="designing-models-and-layers-with-pytorch-and-nn.sequential" class="level1">
<h1>Designing models and layers with PyTorch and nn.Sequential()</h1>
<div id="cell-70" class="cell" data-execution_count="58">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb76-1">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(nn.Linear(M,H), nn.ReLU(), nn.Linear(H,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span></code></pre></div>
</div>
<div id="cell-71" class="cell" data-execution_count="59">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb77-1">model</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="59">
<pre><code>Sequential(
  (0): Linear(in_features=4, out_features=2, bias=True)
  (1): ReLU()
  (2): Linear(in_features=2, out_features=10, bias=True)
)</code></pre>
</div>
</div>
<div id="cell-72" class="cell" data-execution_count="60">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb79-1">layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [nn.Linear(M,H), nn.ReLU(), nn.Linear(H,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)]</span>
<span id="cb79-2">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>layers)</span></code></pre></div>
</div>
<div id="cell-73" class="cell" data-execution_count="61">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb80-1">model</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="61">
<pre><code>Sequential(
  (0): Linear(in_features=4, out_features=2, bias=True)
  (1): ReLU()
  (2): Linear(in_features=2, out_features=10, bias=True)
)</code></pre>
</div>
</div>
<div id="cell-74" class="cell" data-execution_count="62">
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb82-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> model.parameters(): <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(p.shape)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>torch.Size([2, 4])
torch.Size([2])
torch.Size([10, 2])
torch.Size([10])</code></pre>
</div>
</div>
<div id="cell-75" class="cell" data-execution_count="63">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb84-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(model.parameters())</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="63">
<pre><code>[Parameter containing:
 tensor([[-0.2547,  0.3678, -0.3120, -0.4402],
         [-0.0581,  0.0541, -0.0433,  0.2772]], requires_grad=True),
 Parameter containing:
 tensor([ 0.2642, -0.2418], requires_grad=True),
 Parameter containing:
 tensor([[ 0.1416,  0.5259],
         [ 0.1009, -0.4274],
         [-0.2409,  0.4319],
         [-0.2980,  0.1193],
         [ 0.3526,  0.3844],
         [-0.3655, -0.0480],
         [ 0.2450, -0.4946],
         [-0.3897,  0.2618],
         [-0.1028,  0.5648],
         [ 0.5452, -0.5314]], requires_grad=True),
 Parameter containing:
 tensor([ 0.3573,  0.3235, -0.6281, -0.4056, -0.6562, -0.1154,  0.0053, -0.3871,
          0.4785, -0.0720], requires_grad=True)]</code></pre>
</div>
</div>
<div id="cell-76" class="cell" data-execution_count="64">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb86-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example of a custom layer</span></span>
<span id="cb86-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Global Average Pooling Layer (Adaptive Average Pooling Layer)</span></span>
<span id="cb86-3"></span>
<span id="cb86-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> GlobalAvgPooling(nn.Module):</span>
<span id="cb86-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb86-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x.mean((<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>


</section>

 ]]></description>
  <category>NN</category>
  <category>code</category>
  <guid>https://krasing.github.io/nn/posts/classes/classes.html</guid>
  <pubDate>Mon, 02 Jan 2023 22:00:00 GMT</pubDate>
  <media:content url="https://krasing.github.io/nn/posts/classes/custom_layer.png" medium="image" type="image/png" height="55" width="144"/>
</item>
<item>
  <title>The Loss</title>
  <dc:creator>Krasin Georgiev</dc:creator>
  <link>https://krasing.github.io/nn/posts/loss/loss.html</link>
  <description><![CDATA[ 





<p>The loss function determines the output of the neural network. The output layer is not necessarily trained to be equal to the target.</p>
<p>Let’ define <img src="https://latex.codecogs.com/png.latex?z"> as the output of the last linear layer (no activation):</p>
<p><img src="https://latex.codecogs.com/png.latex?z%20=%20%5Bz_1,%20%5Cdots,%20z_h,%20%5Cdots,%20z_H%5D"></p>
<p>Before the loss can be calculated some non-linear transformations may be needed. For example, a classification problem requires the output to be interpreted as a probability for the class assigned to the output node. Therefore the output is skewed to fit in the range [0, 1].</p>
<p>It should be noted that this need is not limited to the classification tasks. In a regression problem for predicting values with high dynamic ranges, the same error does not have the same effect for all predictions, e.g.&nbsp;prediction error of \$1 for a product of \$1000 is small and acceptable, but the same error when the product is \$2 is not good. The simplest solution in such situation is to use logarithm, but this is out of the scope of this tutorial.</p>
<p>The standard loss functions are crossentropy (for classification) and mean squared error (for regression). The non-linearity could be added as a separate layer or could be part of the Loss calculation. This changes the actual output and loss.</p>
<section id="sigmoid-and-softmax-non-linearities" class="level1">
<h1>Sigmoid and softmax non-linearities</h1>
<p>The output <img src="https://latex.codecogs.com/png.latex?z"> can be converted to probability like values <img src="https://latex.codecogs.com/png.latex?%5Chat%7By%7D"> in two ways:</p>
<ul>
<li>through sigmoid, <img src="https://latex.codecogs.com/png.latex?%5Chat%7By%7D_h%20=%20p(c_h)%20=%20%5Cmathrm%7Bsigmoid%7D(z)%20=%20%5Cfrac%7B1%7D%7B1%20+%20%5Cexp(-z_h)%7D%20=%20%5Cfrac%7B%5Cexp(z_h)%7D%7B%5Cexp(z_h)+%5Cexp(0)%7D"> - different outputs are independent, used for binnary classifier, could be used for multilabel-multiclass categorisation. Each output node represents the probability of a separate binnary variable (label).</li>
<li>through softmax, <img src="https://latex.codecogs.com/png.latex?%5Chat%7By%7D_h%20=%20p(c_h)%20=%20%5Cmathrm%7Bsoftmax%7D(z)%20=%20%5Cfrac%7B%5Cexp(z_h)%7D%7B%5Csum%7B%5Cexp(z_j)%7D%7D"> - all outputs sum to one, used for multiclass categorisation. All output node values represent a probability distribution of single variable (class, category)</li>
</ul>
<p>where</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?c_h"> is the category assigned to the <img src="https://latex.codecogs.com/png.latex?h">-th output node</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Chat%7By_h%7D"> is the estimated likelihood of <img src="https://latex.codecogs.com/png.latex?c_h"></li>
</ul>
<div id="199e2e3e" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensor</span></code></pre></div>
</div>
<div id="c28cc5d0" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Available categories</span></span>
<span id="cb2-2">c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'male'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'female'</span>]</span></code></pre></div>
</div>
<div id="cd581733" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate test data - example output z of the last linear layer</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Two output features (H=2)</span></span>
<span id="cb3-3">z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.</span>])</span>
<span id="cb3-4">z, z.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>(tensor([0., 5.]), torch.Size([2]))</code></pre>
</div>
</div>
<div id="af090456" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sigmoid(x):</span>
<span id="cb5-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> torch.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x))</span></code></pre></div>
</div>
<div id="4968bf73" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> softmax(x):</span>
<span id="cb6-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print('Input shape:', x.shape, 'Sum shape:', torch.exp(x).sum(dim=-1, keepdim=True).shape )</span></span>
<span id="cb6-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> torch.exp(x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> torch.exp(x).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</div>
<div id="1681e9e2" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">sigmoid(z), softmax(z)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>(tensor([0.5000, 0.9933]), tensor([0.0067, 0.9933]))</code></pre>
</div>
</div>
<div id="84325221" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastcore.test <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> test_close</span></code></pre></div>
</div>
<div id="5606671d" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">test_close(softmax(z), torch.softmax(z, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>
<div id="ba54ab01" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">test_close(sigmoid(z), torch.sigmoid(z))</span></code></pre></div>
</div>
<p>Neural networks are designed to process data in batches. This means that the input (and the output) will have one additional dimension for the samples.</p>
<div id="69798301" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate test data - batch outputs of the last linear layer</span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Six items (N=6) and two output features (H=2)</span></span>
<span id="cb12-3">zz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>],</span>
<span id="cb12-4">             [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],</span>
<span id="cb12-5">             [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],</span>
<span id="cb12-6">             [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],</span>
<span id="cb12-7">             [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>],</span>
<span id="cb12-8">             [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb12-9">            ])</span>
<span id="cb12-10">zz, zz.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>(tensor([[ 1.0000, 10.0000],
         [ 2.0000, -2.0000],
         [ 2.0000,  2.0000],
         [ 0.0000,  2.0000],
         [ 4.5000,  5.0000],
         [ 0.0000,  0.0000]]),
 torch.Size([6, 2]))</code></pre>
</div>
</div>
<div id="99072512" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">softmax(zz)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>tensor([[1.2339e-04, 9.9988e-01],
        [9.8201e-01, 1.7986e-02],
        [5.0000e-01, 5.0000e-01],
        [1.1920e-01, 8.8080e-01],
        [3.7754e-01, 6.2246e-01],
        [5.0000e-01, 5.0000e-01]])</code></pre>
</div>
</div>
<div id="1b48e3f2" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">test_close(sigmoid(zz), torch.sigmoid(zz))</span></code></pre></div>
</div>
<div id="cede57a0" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">test_close(softmax(zz), torch.softmax(zz, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>
</section>
<section id="targets" class="level1">
<h1>Targets</h1>
<p>The true classes/labels are needed in addition to the model predictions in order to calculate the loss. A target could be provided as a number - the index of the true class, or as a vector - one hot encoding.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://krasing.github.io/nn/posts/loss/targets_c2.png" class="img-fluid figure-img"></p>
<figcaption>Target representation example</figcaption>
</figure>
</div>
<div id="b75f49b7" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate test targets</span></span>
<span id="cb18-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># y = torch.randint(0, 2, (6,))</span></span>
<span id="cb18-3">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb18-4">yy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb18-5">yy[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(yy)), y] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb18-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Target as index: '</span>, y)</span>
<span id="cb18-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'The same, one hot encoding:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, yy)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Target as index:  tensor([1, 1, 1, 0, 1, 0])
The same, one hot encoding:
 tensor([[0., 1.],
        [0., 1.],
        [0., 1.],
        [1., 0.],
        [0., 1.],
        [1., 0.]])</code></pre>
</div>
</div>
</section>
<section id="crossentropy-loss" class="level1">
<h1>Crossentropy loss</h1>
<p>Let’s denote:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?y_%7Bih%7D"> is 1 if for sample <img src="https://latex.codecogs.com/png.latex?i"> the true class is <img src="https://latex.codecogs.com/png.latex?c_h"> and 0 otherwise (one hot encoding).</li>
<li><img src="https://latex.codecogs.com/png.latex?y_i%20=%20%5Cmathrm%7Bargmax%7D(y_%7Bih%7D)"> is the index of the true class for sample <img src="https://latex.codecogs.com/png.latex?i"> from the batch.</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Chat%7By%7D_%7Bih%7D"> is the estimated likelihood of <img src="https://latex.codecogs.com/png.latex?c_h"> for sample <img src="https://latex.codecogs.com/png.latex?i"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Chat%7By%7D_%7Bi%7D%20=%20%5Chat%7By%7D%5Bi,%20j=%5Cmathrm%7Bargmax%7D(y_%7Bih%7D)%5D"> is the estimated likelihood of the true class for sample <img src="https://latex.codecogs.com/png.latex?i"></li>
</ul>
<p>Crossentropy loss can be defined for binnary cases as follows:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BL%7D%20=%20-%20%5Csum_%7Bi=1%7D%5EN%7B%5B%20y_i%20%5Cln(%5Chat%7By_i%7D)%20+%20(1%20-y_i)%20%5Cln(1%20-%5Chat%7By%7D_i)%5D%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BL%7D%20=%20-%20%5Csum_%7Bi=1%7D%5EN%7B%5B%20y_i%20%5Cln(p(c_i))%20+%20(1%20-y_i)%20%5Cln(1%20-p(c_i))%5D%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BL%7D%20=%20-%20%5Csum_%7Bi=1%7D%5EN%7B%5B%20y_i%20%5Cln(%5Cmathrm%7Bsigmoid(z_i)%7D)%20+%20(1%20-y_i)%20%5Cln(1%20-%5Cmathrm%7Bsigmoid(z_i)%7D)%5D%7D"></p>
<p>Crossentropy loss can be defined for multiclass cases as follows:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BL%7D%20=%20-%20%5Csum_%7Bi=1%7D%5EN%20%5Csum_%7Bh=1%7D%5EH%7By_%7Bij%7D%5Cln(%5Chat%7By%7D_%7Bih%7D)%20%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BL%7D%20=%20-%20%5Csum_%7Bi=1%7D%5EN%20%5Csum_%7Bh=1%7D%5EH%7By_%7Bij%7D%20%5Cln(p(c_%7Bih%7D))%20%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BL%7D%20=%20-%20%5Csum_%7Bi=1%7D%5EN%20%5Csum_%7Bh=1%7D%5EH%7By_%7Bij%7D%20%5Cln(%5Cmathrm%7Bsoftmax(z_%7Bih%7D)%7D)%20%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BL%7D%20=%20-%20%5Csum_%7Bi=1%7D%5EN%20%7B%5Cln(%5Chat%7By%7D_%7Bi%7D)%20%7D%0A=%20-%20%5Csum_%7Bi=1%7D%5EN%20%7B%20%5Cln(p(c_%7Bi%7D))%20%7D%0A=%20-%20%5Csum_%7Bi=1%7D%5EN%20%7B%20%5Cln(%5Cmathrm%7Bsoftmax(z_%7Bi%7D)%7D)%20%7D"></p>
<p>We can notice that:</p>
<ul>
<li>Only the softmax of the true classes is needes as the other outputs are multiplied by zero (<img src="https://latex.codecogs.com/png.latex?y_%7Bij%7D=0"> for one hot encoded class different than <img src="https://latex.codecogs.com/png.latex?y_i">)</li>
<li>We need logarithm of the softmax, so the expression contain <img src="https://latex.codecogs.com/png.latex?%5Clog(%5Cexp())"> and can be simplified</li>
</ul>
<section id="logsoftmax-calculation" class="level2">
<h2 class="anchored" data-anchor-id="logsoftmax-calculation">Log(Softmax) calculation</h2>
<div id="cff95eb1" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> log_softmax(x):</span>
<span id="cb20-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''Logarithm of predicted probabilities calculated from the output'''</span></span>
<span id="cb20-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> softmax(x).log()</span></code></pre></div>
</div>
<div id="c60e446d" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">test_close(log_softmax(z), torch.log_softmax(z, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>
<div id="03eb9f7b" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">test_close(log_softmax(zz), torch.log_softmax(zz, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>
<div id="fc2fde07" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> log_softmax2(x):</span>
<span id="cb23-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x.exp().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>).log()</span></code></pre></div>
</div>
<div id="c3f7510c" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">test_close(log_softmax2(z), torch.log_softmax(z, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>
<div id="8879639c" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">test_close(log_softmax2(zz), torch.log_softmax(zz, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>
<div id="eaa0438b" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> logsumexp(x):</span>
<span id="cb26-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a = x.max(dim=-1, keepdim=True)[0]</span></span>
<span id="cb26-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># return a + (x-a).exp().sum(dim=-1, keepdim=True).log()</span></span>
<span id="cb26-4">    a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb26-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>a[...,<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]).exp().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).log()</span></code></pre></div>
</div>
<div id="42c8ba2c" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">test_close(logsumexp(z), torch.logsumexp(z, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>
<div id="af45ce1b" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">test_close(logsumexp(zz), torch.logsumexp(zz, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>
<div id="b99e39cc" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> log_softmax3(x):</span>
<span id="cb29-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> logsumexp(x).unsqueeze(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<div id="ad7b4add" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">test_close(log_softmax3(z), torch.log_softmax(z, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>
<div id="8b5a19cb" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">test_close(log_softmax3(zz), torch.log_softmax(zz, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>
</section>
<section id="cross-entropy-loss-for-log-probabilities-f.nll_loss" class="level2">
<h2 class="anchored" data-anchor-id="cross-entropy-loss-for-log-probabilities-f.nll_loss">Cross-entropy loss for log-probabilities, <code>F.nll_loss()</code></h2>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BL%7D%20=%20-%20%5Csum_%7Bi=1%7D%5EN%20%5Csum_%7Bh=1%7D%5EH%7By_%7Bij%7D%20%5Cln(p(c_%7Bih%7D))%20%7D%20=%20-%20%5Csum_%7Bi=1%7D%5EN%20%7B%5Cln(%5Chat%7By%7D_%7Bi%7D)%20%7D"></p>
<p>If case of training with such a loss function, the output of the network should be interpreted as log-probabilities. To convert to probabilities, take the exponent of the predictions. My note: a kind of failure intensity: <img src="https://latex.codecogs.com/png.latex?p%20=%20%5Cexp(-%5Clambda%20t)%20%5Cimplies%20%5Cln(p)%20=%20-%5Clambda%20t"> compare with <img src="https://latex.codecogs.com/png.latex?q%20=%201%20-%20p%20=%201%20-%20%5Cexp(-%5Clambda%20t)%20%5Capprox%20%5Clambda%20t">.</p>
<div id="b5075107" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> nll(x, y):</span>
<span id="cb32-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''Take the mean value of the correct x</span></span>
<span id="cb32-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">       x: pred_as_log_softmax</span></span>
<span id="cb32-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">       y: target_as_index</span></span>
<span id="cb32-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '''</span></span>
<span id="cb32-6">    N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb32-7">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>x[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(N), y].mean()</span>
<span id="cb32-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> loss</span></code></pre></div>
</div>
<div id="9078ad2d" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span></code></pre></div>
</div>
<div id="880853f9" class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">vv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>torch.rand((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb34-2">nll(vv, y)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<pre><code>tensor(2.1238)</code></pre>
</div>
</div>
<div id="13708fa5" class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># notice that the log-likelihood values are negative!</span></span>
<span id="cb36-2">vv, y, [c[yi] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> yi <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> y]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>(tensor([[-2.1895, -1.1382],
         [-1.5560, -4.0288],
         [-1.4380, -1.8596],
         [-1.7396, -1.1178],
         [-4.1428, -3.8919],
         [-0.0845, -2.6688]]),
 tensor([1, 1, 1, 0, 1, 0]),
 ['female', 'female', 'female', 'male', 'female', 'male'])</code></pre>
</div>
</div>
<div id="a0fc4647" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">test_close(nll(vv,y), F.nll_loss(vv, y))</span></code></pre></div>
</div>
<div id="a665ead3" class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># explore the correspondance between log-likelihoods and linelihoods</span></span>
<span id="cb39-2">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tensor([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>])</span>
<span id="cb39-3">aa <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a.exp()</span>
<span id="cb39-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.2f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> a])</span>
<span id="cb39-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.3f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> aa])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['-4.00', '-3.00', '-2.00', '-1.00', '-0.50', '-0.20', '-0.05', '0.00', '0.50']
['0.018', '0.050', '0.135', '0.368', '0.607', '0.819', '0.951', '1.000', '1.649']</code></pre>
</div>
</div>
</section>
<section id="cross-entropy-loss-for-raw-outputs-f.cross_entropy" class="level2">
<h2 class="anchored" data-anchor-id="cross-entropy-loss-for-raw-outputs-f.cross_entropy">Cross-entropy loss for raw outputs, <code>F.cross_entropy()</code></h2>
<p>Cross-entropy is calculated directly from the output without conversion to probabilities or log-probabilities. All these operations are included in the loss function calculation. The interpretation of the output is unclear, could be any value from <img src="https://latex.codecogs.com/png.latex?-%5Cinfty"> to <img src="https://latex.codecogs.com/png.latex?%5Cinfty"> – useful for other regression tasks</p>
<div id="ed096211" class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> cross_entropy(x, y):</span>
<span id="cb41-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> nll(log_softmax3(x), y)</span></code></pre></div>
</div>
<div id="75dc4452" class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">cross_entropy(zz, y)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="34">
<pre><code>tensor(1.3343)</code></pre>
</div>
</div>
<div id="f685979a" class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">test_close(cross_entropy(zz, y), F.cross_entropy(zz, y))</span></code></pre></div>
</div>
</section>
<section id="cross-entropy-loss-for-multi-label-target" class="level2">
<h2 class="anchored" data-anchor-id="cross-entropy-loss-for-multi-label-target">Cross-entropy loss for multi-label target</h2>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BL%7D%20=%20-%20%5Csum_%7Bi=1%7D%5EN%20%5Csum_%7Bh=1%7D%5EH%7B%5B%20y_%7Bih%7D%20%5Cln(%5Chat%7By_%7Bih%7D%7D)%20+%20(1%20-y_%7Bih%7D)%20%5Cln(1%20-%5Chat%7By%7D_%7Bih%7D)%5D%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BL%7D%20=%20-%20%5Csum_%7Bi=1%7D%5EN%20%5Csum_%7Bh=1%7D%5EH%7B%5B%20y_%7Bih%7D%20%5Cln(p(c_%7Bih%7D))%20+%20(1%20-y_%7Bih%7D)%20%5Cln(1%20-p(c_%7Bih%7D))%5D%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BL%7D%20=%20-%20%5Csum_%7Bi=1%7D%5EN%20%5Csum_%7Bh=1%7D%5EH%20%5Csum_%7Bk=1%7D%5E2%7By_%7Bihk%7D%20%5Cln(p(c_%7Bih%7D%5Bk%5D))%20%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BL%7D%20=%20-%20%5Csum_%7Bi=1%7D%5EN%7B%5B%20y_i%20%5Cln(%5Cmathrm%7Bsigmoid(z_i)%7D)%20+%20(1%20-y_i)%20%5Cln(1%20-%5Cmathrm%7Bsigmoid(z_i)%7D)%5D%7D"></p>
<div id="1a58e7b4" class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate test targets - a kind of one hot encoded but multiple ones are allowed</span></span>
<span id="cb45-2">yy[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb45-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Both ones for the first sample:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, yy)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Both ones for the first sample:
 tensor([[1., 1.],
        [0., 1.],
        [0., 1.],
        [1., 0.],
        [0., 1.],
        [1., 0.]])</code></pre>
</div>
</div>
<div id="001b2f6d" class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> cross_entropy_multi(z, y):</span>
<span id="cb47-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''z: pred as unnormalized scores</span></span>
<span id="cb47-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">       y: target as binary encoded aray'''</span></span>
<span id="cb47-4">    s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.sigmoid(z)</span>
<span id="cb47-5">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> s.log() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> s).log()).mean()</span>
<span id="cb47-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> loss</span></code></pre></div>
</div>
<div id="8cde15bc" class="cell" data-scrolled="true" data-execution_count="38">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">cross_entropy_multi(zz, yy)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="38">
<pre><code>tensor(1.2954)</code></pre>
</div>
</div>
<div id="98577cc0" class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">F.binary_cross_entropy_with_logits(zz, yy)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="39">
<pre><code>tensor(1.2954)</code></pre>
</div>
</div>
<div id="359af67a" class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">F.binary_cross_entropy(torch.sigmoid(zz), yy)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="40">
<pre><code>tensor(1.2954)</code></pre>
</div>
</div>
<p>TO DO: clarify notations (not consistent yet!), add visualizations</p>


</section>
</section>

 ]]></description>
  <category>NN</category>
  <guid>https://krasing.github.io/nn/posts/loss/loss.html</guid>
  <pubDate>Sun, 04 Dec 2022 22:00:00 GMT</pubDate>
  <media:content url="https://krasing.github.io/nn/posts/loss/targets.png" medium="image" type="image/png" height="96" width="144"/>
</item>
<item>
  <title>Gradients, broadcasting and backpropagation</title>
  <dc:creator>Krasin Georgiev</dc:creator>
  <link>https://krasing.github.io/nn/posts/gradients/gradients.html</link>
  <description><![CDATA[ 





<p>Let’s have <img src="https://latex.codecogs.com/png.latex?y%20=%20w%20%5Ccdot%20x%20%20+%20b">. Application of the rules of differentiation is simple, e.g.&nbsp;</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cmathrm%7Bd%7Dy%7D%7B%5Cmathrm%7Bd%7Dx%7D%20=%20w%20,%20%5Cquad%0A%5Cfrac%7B%5Cmathrm%7Bd%7Dy%7D%7B%5Cmathrm%7Bd%7Dw%7D%20=%20x,%20%5Cquad%0A%5Cfrac%7B%5Cmathrm%7Bd%7Dy%7D%7B%5Cmathrm%7Bd%7Db%7D%20=%201"></p>
<p>The change in <img src="https://latex.codecogs.com/png.latex?y"> is porportional to the change in <img src="https://latex.codecogs.com/png.latex?x">. The bigger is <img src="https://latex.codecogs.com/png.latex?w">, the bigger is the change of <img src="https://latex.codecogs.com/png.latex?y"> for the same change of <img src="https://latex.codecogs.com/png.latex?x">.</p>
<p>Let’s <img src="https://latex.codecogs.com/png.latex?L%20=%20f(y)%20=%20f(y(x))">. Application of the chain rule is simple, e.g.&nbsp;</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cmathrm%7Bd%7DL%7D%7B%5Cmathrm%7Bd%7Dx%7D%20=%20%5Cfrac%7B%5Cmathrm%7Bd%7Df(y)%7D%7B%5Cmathrm%7Bd%7Dy%7D%20%5Ccdot%20%5Cfrac%7B%5Cmathrm%7Bd%7Dy%7D%7B%5Cmathrm%7Bd%7Dx%7D%20=%20%5Cfrac%7B%5Cmathrm%7Bd%7DL%7D%7B%5Cmathrm%7Bd%7Dy%7D%20%5Ccdot%20w"> <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cmathrm%7Bd%7DL%7D%7B%5Cmathrm%7Bd%7Dw%7D%20=%20%5Cfrac%7B%5Cmathrm%7Bd%7Df(y)%7D%7B%5Cmathrm%7Bd%7Dy%7D%20%5Ccdot%20%5Cfrac%7B%5Cmathrm%7Bd%7Dy%7D%7B%5Cmathrm%7Bd%7Dw%7D%20=%20%5Cfrac%7B%5Cmathrm%7Bd%7DL%7D%7B%5Cmathrm%7Bd%7Dy%7D%20%5Ccdot%20x"> <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cmathrm%7Bd%7DL%7D%7B%5Cmathrm%7Bd%7Db%7D%20=%20%5Cfrac%7B%5Cmathrm%7Bd%7Df(y)%7D%7B%5Cmathrm%7Bd%7Dy%7D%20%5Ccdot%20%5Cfrac%7B%5Cmathrm%7Bd%7Dy%7D%7B%5Cmathrm%7Bd%7Db%7D%20=%20%5Cfrac%7B%5Cmathrm%7Bd%7DL%7D%7B%5Cmathrm%7Bd%7Dy%7D%20%5Ccdot%201"></p>
<p>The multidimensional case is not so simple. Functions with multiple inputs and multiple outputs have multiple partial derivatives which need to be arranged and stored properly. Applying this for batches of data complicates the picture even more.</p>
<section id="derivative-of-a-transformation" class="level2">
<h2 class="anchored" data-anchor-id="derivative-of-a-transformation">Derivative of a transformation</h2>
<p>The derivative of a function (transformation <img src="https://latex.codecogs.com/png.latex?%5Cpsi">) with multiple inputs <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D%20%5Cin%20%5Cmathbb%7BR%7D%5EM"> and multiple outputs <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7By%7D%20%5Cin%20%5Cmathbb%7BR%7D%5EH"> is a matrix containing the partial derivatives of each output with respect to each input (the so called Jacobian of the transformation, <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%7B%5Cmathbf%7By%7D%7D%7D%7B%5Cpartial%7B%5Cmathbf%7Bx%7D%7D%7D%20%5Cin%20%5Cmathbb%7BR%7D%5E%7BM%20%5Ctimes%20H%7D">). For example, if <img src="https://latex.codecogs.com/png.latex?M=4"> and <img src="https://latex.codecogs.com/png.latex?H=2"> we can write:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7By%7D%20=%20%5Cpsi(%5Cmathbf%7Bx%7D)">,</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D%20=%20%5Cbegin%7Bbmatrix%7D%20x_1%20%5C%5C%20x_2%20%5C%5C%20x_3%20%5C%5C%20x_4%5Cend%7Bbmatrix%7D,%20%5Cquad%0A%5Cmathbf%7By%7D%20=%20%5Cbegin%7Bbmatrix%7D%20y_1%20%5C%5C%20y_2%20%5Cend%7Bbmatrix%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpartial%7B%5Cmathbf%7By%7D%7D%7D%7B%5Cpartial%7B%5Cmathbf%7Bx%7D%7D%7D%20=%20%5Cbegin%7Bbmatrix%7D%20%5Cfrac%7B%5Cpartial%7By_1%7D%7D%7B%5Cpartial%7Bx_1%7D%7D%20&amp;%20%5Cfrac%7B%5Cpartial%7By_1%7D%7D%7B%5Cpartial%7Bx_2%7D%7D%20&amp;%20%5Cfrac%7B%5Cpartial%7By_1%7D%7D%7B%5Cpartial%7Bx_3%7D%7D%20%20&amp;%20%5Cfrac%7B%5Cpartial%7By_1%7D%7D%7B%5Cpartial%7Bx_4%7D%7D%5C%5C%0A%5Cfrac%7B%5Cpartial%7By_2%7D%7D%7B%5Cpartial%7Bx_1%7D%7D%20&amp;%20%5Cfrac%7B%5Cpartial%7By_2%7D%7D%7B%5Cpartial%7Bx_2%7D%7D%20&amp;%20%5Cfrac%7B%5Cpartial%7By_2%7D%7D%7B%5Cpartial%7Bx_3%7D%7D%20&amp;%20%5Cfrac%7B%5Cpartial%7By_2%7D%7D%7B%5Cpartial%7Bx_4%7D%7D%0A%5Cend%7Bbmatrix%7D"></p>
<p>The derivative of <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7By%20=%20W%20%5Ccdot%20x%7D"> with respect to <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D"> is <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BW%7D">, i.e.&nbsp;<img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%E2%88%82y%7D%7B%E2%88%82x%7D%20=%20W">.</p>
<p>We should note that in neural networks the input and output features are arranged as raw vectors.</p>
<p>The derivative of <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7By%20=%20x%20%5Ccdot%20W%7D"> with respect to <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D"> is <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BW%5ET%7D">, i.e.&nbsp;</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%E2%88%82y%7D%7B%E2%88%82x%7D%20=%20W%5ET"></p>
</section>
<section id="the-chain-rule" class="level2">
<h2 class="anchored" data-anchor-id="the-chain-rule">The chain rule</h2>
<p>Let’s have <img src="https://latex.codecogs.com/png.latex?y%20=%20x%20%5Ccdot%20W%20+%20b"> and <img src="https://latex.codecogs.com/png.latex?L%20=%20f(y)"></p>
<div class="quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://krasing.github.io/nn/posts/gradients/nn-mini.png" class="img-fluid figure-img"></p>
<figcaption>Simple NN</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://krasing.github.io/nn/posts/gradients/xW.png" class="img-fluid figure-img"></p>
<figcaption>Matrix view, xW</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>The chain rule involves propagating the gradient of the loss layer after layer backward towards the inputs and parameters of interest. In our demonstration case in order to calculate the gradient of <img src="https://latex.codecogs.com/png.latex?L"> with respect to the input <img src="https://latex.codecogs.com/png.latex?x"> we need to have the gradient of <img src="https://latex.codecogs.com/png.latex?L"> with respect to the output <img src="https://latex.codecogs.com/png.latex?y">.</p>
<p>The shapes of the gradient is the same as the shape of the corresponding variable (parameter)</p>
<p><strong>A gradient is attached to each variable and parameter of the model</strong>, i.e.</p>
<p><img src="https://latex.codecogs.com/png.latex?y.g%20=%20%5Cfrac%7B%5Cpartial%7BL%7D%7D%7B%E2%88%82%7By%7D%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?x.g%20=%20%5Cfrac%7B%5Cpartial%7BL%7D%7D%7B%E2%88%82%7Bx%7D%7D%20=%20%5Cfrac%7B%5Cpartial%7BL%7D%7D%7B%5Cpartial%7By%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%7By%7D%7D%7B%5Cpartial%7Bx%7D%7D%20=%20y.g%20%5Ccdot%20%5Cfrac%7B%5Cpartial%7By%7D%7D%7B%5Cpartial%7Bx%7D%7D%20=%20y.g%20%5Ccdot%20W%5ET"></p>
<p><img src="https://latex.codecogs.com/png.latex?b.g%20=%20%5Cfrac%7B%5Cpartial%7BL%7D%7D%7B%E2%88%82%7Bb%7D%7D%20=%20%5Cfrac%7B%5Cpartial%7BL%7D%7D%7B%5Cpartial%7By%7D%7D%20%5Ccdot%20%5Cfrac%7B%5Cpartial%7By%7D%7D%7B%5Cpartial%7Bb%7D%7D%20=%20y.g%20%5Ccdot%20%5Cfrac%7B%5Cpartial%7By%7D%7D%7B%5Cpartial%7Bb%7D%7D%20=%20y.g"></p>
<p><img src="https://latex.codecogs.com/png.latex?W.g%20=%20%5Cfrac%7B%5Cpartial%7BL%7D%7D%7B%E2%88%82W%7D%20=%20((%5Cfrac%7B%5Cpartial%7BL%7D%7D%7B%5Cpartial%7By%7D%7D)%5ET%20%5Ccdot%20%5Cfrac%7B%5Cpartial%7By%7D%7D%7B%5Cpartial%7BW%7D%7D)%5ET%20=%20(y.g%5ET%20%5Ccdot%20x)%5ET%20=%20x%5ET%20%5Ccdot%20y.g"></p>
<p><img src="https://krasing.github.io/nn/posts/gradients/x.grad.png" class="img-fluid" alt="x.g calculation"> <img src="https://krasing.github.io/nn/posts/gradients/W.grad.png" class="img-fluid" alt="W.g calculation"></p>
<p>Notes:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?x">, <img src="https://latex.codecogs.com/png.latex?y"> and <img src="https://latex.codecogs.com/png.latex?b"> are row vectors.</li>
<li><img src="https://latex.codecogs.com/png.latex?W"> is a weight matrix with <img src="https://latex.codecogs.com/png.latex?m"> rows and <img src="https://latex.codecogs.com/png.latex?h"> columns;</li>
<li><img src="https://latex.codecogs.com/png.latex?x"> includes the <img src="https://latex.codecogs.com/png.latex?m"> input features</li>
<li><img src="https://latex.codecogs.com/png.latex?b"> is a bias with <img src="https://latex.codecogs.com/png.latex?h"> elements;</li>
<li><img src="https://latex.codecogs.com/png.latex?y"> has <img src="https://latex.codecogs.com/png.latex?h"> features (or nodes).</li>
<li><img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?y"> represent input and output features (variables, nodes in the NN). Adding additional dimension (multiple rows) could represent multiple data samples. Inputs and outputs could be replaced by matrices <img src="https://latex.codecogs.com/png.latex?X"> and <img src="https://latex.codecogs.com/png.latex?Y"> where the last dimension gives the features (<img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?y"> for the corresponding data point);</li>
</ul>
</section>
<section id="implementation-and-testing-with-code" class="level2">
<h2 class="anchored" data-anchor-id="implementation-and-testing-with-code">Implementation and testing with code</h2>
<p>Above equations are implemented in function <code>lin_grad</code> and tested in the following code</p>
<div id="cell-15" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> lin_grad(x, w, b, y):</span>
<span id="cb1-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># y.g shoudl be available!</span></span>
<span id="cb1-3">    b.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y.g.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#/y.shape[0]</span></span>
<span id="cb1-4">    w.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> y.g</span>
<span id="cb1-5">    x.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> w.T</span></code></pre></div>
</div>
<div id="cell-16" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensor</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb2-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span></code></pre></div>
</div>
<div id="cell-17" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate test input and ouput data</span></span>
<span id="cb3-2">N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of samples</span></span>
<span id="cb3-3">M <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of input features</span></span>
<span id="cb3-4">H <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of outputs</span></span>
<span id="cb3-5">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.rand((N, M))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Input</span></span>
<span id="cb3-6">k1, k2, k3, k4, k6, k7 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb3-7">W_true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([[k1, k1],</span>
<span id="cb3-8">                  [k2, k2],</span>
<span id="cb3-9">                  [k3, k6],</span>
<span id="cb3-10">                  [k4, k7]])</span>
<span id="cb3-11">b_true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb3-12">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W_true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b_true <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output</span></span>
<span id="cb3-13">W_true, y[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>(tensor([[ 1.0000,  1.0000],
         [ 1.5000,  1.5000],
         [ 2.0000,  3.0000],
         [ 2.5000, -0.5000]]),
 tensor([[-11.5291, -12.7022],
         [ -3.9763, -22.8349],
         [  2.2930,   7.2452],
         [ -4.9708,   6.3649],
         [-11.7199, -24.9706],
         [ 14.8387,   5.4946],
         [ -9.7971,  -0.4925]]))</code></pre>
</div>
</div>
<div id="cell-18" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">plt.scatter(x[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], y[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-2">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Input, dimension (feature) No3'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-3">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Output, dim. No2'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://krasing.github.io/nn/posts/gradients/gradients_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-19" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate random weights</span></span>
<span id="cb6-2">w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(M,H)</span>
<span id="cb6-3">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(H)</span>
<span id="cb6-4">w, b</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>(tensor([[-0.0383, -0.8173],
         [ 0.8458, -2.0662],
         [ 0.1153,  0.0775],
         [ 1.0845, -0.1016]]),
 tensor([0., 0.]))</code></pre>
</div>
</div>
<p>In order to test the function <code>lin_grad</code> we need to calculate the gradient <img src="https://latex.codecogs.com/png.latex?%E2%88%82L/dy"> and save it in <code>y_pred.g</code> (the gradient with respect to the prediction):</p>
<ul>
<li>define model and calculate prediction</li>
<li>define and calculate loss <img src="https://latex.codecogs.com/png.latex?L"> as simple mean squared error <code>mse(y_pred, y_targ)</code></li>
<li>define and run <code>mse_grad(y_pred, y_targ)</code></li>
<li>run <code>lin_grad(x, w, b, y)</code></li>
</ul>
<div id="cell-21" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> lin(x, w, b): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span></code></pre></div>
</div>
<div id="cell-22" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lin(x, w, b)</span>
<span id="cb9-2">y_pred[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>tensor([[ 0.0472, -0.5698],
        [ 1.4009,  5.7816],
        [-3.4003,  1.4367],
        [-0.9559, -5.0894],
        [-0.9125,  9.5171]])</code></pre>
</div>
</div>
<div id="cell-23" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> mse(y_pred, y_targ): <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (y_pred<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>y_targ).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">pow</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).mean()</span></code></pre></div>
</div>
<div id="cell-24" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mse(y_pred, y)</span>
<span id="cb12-2">loss</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>tensor(181.8108)</code></pre>
</div>
</div>
<div id="cell-25" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> mse_grad(y_pred, y_targ): y_pred.g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y_targ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> y_targ.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> y_targ.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
</div>
<div id="cell-26" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">mse_grad(y_pred, y)</span></code></pre></div>
</div>
<p>Finnally, test if all dimensions in <code>lin_grad</code> match:</p>
<div id="cell-28" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">lin_grad(x, w, b, y_pred)</span></code></pre></div>
</div>
<p>Next test if the loss improves</p>
<div id="cell-30" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> w.g</span>
<span id="cb17-2">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b.g</span>
<span id="cb17-3">y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lin(x, w, b)</span>
<span id="cb17-4">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mse(y_pred, y)</span>
<span id="cb17-5">loss</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>tensor(9.2100)</code></pre>
</div>
</div>
<div id="cell-31" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>):</span>
<span id="cb19-2">    y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lin(x, w, b)</span>
<span id="cb19-3">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mse(y_pred, y)</span>
<span id="cb19-4">    mse_grad(y_pred, y)</span>
<span id="cb19-5">    lin_grad(x, w, b, y_pred)</span>
<span id="cb19-6">    w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> w.g</span>
<span id="cb19-7">    b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> b.g</span>
<span id="cb19-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(loss, end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">', '</span>)</span>
<span id="cb19-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'End!</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb19-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Weights and biases of the network and for the dataset:'</span>)</span>
<span id="cb19-11">w, b, W_true, b_true</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>tensor(9.2100), tensor(7.3055), tensor(5.8198), tensor(4.6593), tensor(3.7515), tensor(3.0402), tensor(2.4818), tensor(2.0425), tensor(1.6961), tensor(1.4221), tensor(1.2048), tensor(1.0318), tensor(0.8936), tensor(0.7827), tensor(0.6933), tensor(0.6208), tensor(0.5616), tensor(0.5130), tensor(0.4729), tensor(0.4394), End!

Weights and biases of the network and for the dataset:</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>(tensor([[ 1.0095,  0.9741],
         [ 1.5336,  1.5728],
         [ 1.9631,  3.0287],
         [ 2.3814, -0.5464]]),
 tensor([ 0.0677, -0.2069]),
 tensor([[ 1.0000,  1.0000],
         [ 1.5000,  1.5000],
         [ 2.0000,  3.0000],
         [ 2.5000, -0.5000]]),
 tensor([ 0, -1]))</code></pre>
</div>
</div>
</section>
<section id="pytorch-autograd-and-backpropagation" class="level2">
<h2 class="anchored" data-anchor-id="pytorch-autograd-and-backpropagation">PyTorch autograd and backpropagation</h2>
<p>We will use PyTorch automatic gradient calculation to check our algorithms. This involves using the build-in methods and parameters <code>.backward()</code> and <code>.grad</code>.</p>
<p>In order to apply PyTorch backpropagation and autograd we need to define a <code>forward</code> function that relates the inputs with the loss:</p>
<div id="cell-35" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(x, y):</span>
<span id="cb22-2">    y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lin(x, w, b)</span>
<span id="cb22-3">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  mse(y_pred, y)</span>
<span id="cb22-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> loss</span></code></pre></div>
</div>
<div id="cell-36" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> forward(x, y)</span>
<span id="cb23-2">loss</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>tensor(0.4113)</code></pre>
</div>
</div>
<p>But this is not enough:</p>
<pre><code>    loss.backward()</code></pre>
<p>–&gt; <code>RuntimeError: element 0 of tensors does not require grad and does not have a grad_fn</code></p>
<p>Looks like a slot for saving the gradient to the corresponding inputs and model parameters should be required.</p>
<div id="cell-38" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update gradients as above - manual backward - for comparison</span></span>
<span id="cb26-2"></span>
<span id="cb26-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># forward</span></span>
<span id="cb26-4">y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lin(x, w, b)</span>
<span id="cb26-5">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  mse(y_pred, y)</span>
<span id="cb26-6"></span>
<span id="cb26-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># backward</span></span>
<span id="cb26-8">mse_grad(y_pred, y)</span>
<span id="cb26-9">lin_grad(x, w, b, y_pred)</span>
<span id="cb26-10"></span>
<span id="cb26-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Good to know: the parameters are not updated in the backward pass!</span></span></code></pre></div>
</div>
<div id="cell-39" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Require gradient to keep them with the data</span></span>
<span id="cb27-2"></span>
<span id="cb27-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> element <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [x, w, b]:</span>
<span id="cb27-4">    element.requires_grad_(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</div>
<div id="cell-40" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> forward(x, y)</span>
<span id="cb28-2">loss.backward()</span></code></pre></div>
</div>
<div id="cell-41" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">loss</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>tensor(0.4113, grad_fn=&lt;MeanBackward0&gt;)</code></pre>
</div>
</div>
<div id="cell-42" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastcore.test <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> test_close</span></code></pre></div>
</div>
<div id="cell-43" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">test_close(x.g, x.grad)</span>
<span id="cb32-2">test_close(w.g, w.grad)</span>
<span id="cb32-3">test_close(b.g, b.grad)</span></code></pre></div>
</div>
</section>
<section id="what-is-next" class="level2">
<h2 class="anchored" data-anchor-id="what-is-next">What is next?</h2>
<p>The next step is to try to create a “proper” non-linear neural network.</p>
<p>The structure of a fully connected neural network with single hidden layer could be represented as follows:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://krasing.github.io/nn/posts/gradients/nn.png" class="img-fluid figure-img"></p>
<figcaption>NN with one hidden layer</figcaption>
</figure>
</div>
<p>A few more gradients need to be defined and calculated</p>


</section>

 ]]></description>
  <category>NN</category>
  <guid>https://krasing.github.io/nn/posts/gradients/gradients.html</guid>
  <pubDate>Tue, 22 Nov 2022 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Welcome to my blog</title>
  <link>https://krasing.github.io/nn/posts/welcome/</link>
  <description><![CDATA[ 





<p>This is the first post in a Quarto blog. Welcome!</p>



 ]]></description>
  <category>admin</category>
  <guid>https://krasing.github.io/nn/posts/welcome/</guid>
  <pubDate>Mon, 14 Nov 2022 22:00:00 GMT</pubDate>
</item>
</channel>
</rss>
